cmake_minimum_required(VERSION 3.8.10)

if(UNIX AND NOT APPLE)
	set(LINUX true CACHE INTERNAL "L" )
endif()

project(WCDB)

add_definitions("-DWCDB_BUILTIN_SQLCIPHER")

if(LINUX)

message("add defines on linux, CRYPTO_OPEN_SSL")

add_definitions("
 -DSQLITE_ENABLE_MEMORY_MANAGEMENT=1
 -DSQLITE_HAS_CODEC 
 -DSQLITE_CORE
 -DSQLITE_OS_UNIX
 -DHAVE_USLEEP=1 
 -DHAVE_FDATASYNC=1 
 -DSQLITE_HAVE_ISNAN 
 -DSQLCIPHER_PREPROCESSED
 -DSQLITE_DEFAULT_FILE_FORMAT=4 
 -DSQLITE_THREADSAFE=2 
 -DSQLITE_TEMP_STORE=3 
 -DSQLITE_ENABLE_FTS3 
 -DSQLITE_ENABLE_FTS4 
 -DSQLITE_ENABLE_FTS5 
 -DSQLITE_ENABLE_JSON1 
 -DSQLITE_ENABLE_SESSION
 -DSQLITE_ENABLE_PREUPDATE_HOOK 
 -DSQLITE_DEFAULT_WORKER_THREADS=2 
 -DSQLITE_DEFAULT_JOURNAL_SIZE_LIMIT=1048576 
 -DUSE_PREAD64=1 
 -DSQLITE_ENABLE_FTS3_PARENTHESIS 
 -DSQLITE_ENABLE_FTS3_TOKENIZER 
 -DSQLITE_ENABLE_STAT4 
 -DSQLITE_ENABLE_EXPLAIN_COMMENTS 
 -DSQLITE_ENABLE_DBSTAT_VTAB
 -DSQLITE_MALLOC_SOFT_LIMIT=0 
 -DOMIT_MEMLOCK -DOMIT_CONSTTIME_MEM 
 -DSQLCIPHER_CRYPTO_OPENSSL 
 -DSQLCIPHER_CRYPTO_XXTEA 
 -DSQLCIPHER_CRYPTO_DEVLOCK
 -DSQLITE_ENABLE_RTREE 
 -DSQLITE_ENABLE_COLUMN_METADATA")

elseif(ANDROID)

message("add defines on android, OPEN_SSL")

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} --disable-tcl")
add_definitions("
 -DSQLITE_ENABLE_MEMORY_MANAGEMENT=1
 -DSQLITE_HAS_CODEC 
 -DSQLITE_CORE
 -DSQLITE_OS_UNIX
 -DHAVE_USLEEP=1 
 -DHAVE_FDATASYNC=1 
 -DSQLITE_HAVE_ISNAN 
 -DSQLCIPHER_PREPROCESSED
 -DSQLITE_DEFAULT_FILE_FORMAT=4 
 -DSQLITE_THREADSAFE=2 
 -DSQLITE_TEMP_STORE=3 
 -DSQLITE_ENABLE_FTS3 
 -DSQLITE_ENABLE_FTS4 
 -DSQLITE_ENABLE_FTS5 
 -DSQLITE_ENABLE_JSON1 
 -DSQLITE_ENABLE_SESSION
 -DSQLITE_ENABLE_PREUPDATE_HOOK 
 -DSQLITE_DEFAULT_WORKER_THREADS=2 
 -DSQLITE_DEFAULT_JOURNAL_SIZE_LIMIT=1048576 
 -DUSE_PREAD64=1 
 -DSQLITE_ENABLE_FTS3_PARENTHESIS 
 -DSQLITE_ENABLE_FTS3_TOKENIZER 
 -DSQLITE_ENABLE_STAT4 
 -DSQLITE_ENABLE_EXPLAIN_COMMENTS 
 -DSQLITE_ENABLE_DBSTAT_VTAB
 -DSQLITE_MALLOC_SOFT_LIMIT=0 
 -DOMIT_MEMLOCK -DOMIT_CONSTTIME_MEM 
 -DSQLCIPHER_CRYPTO_OPENSSL 
 -DSQLCIPHER_CRYPTO_XXTEA 
 -DSQLCIPHER_CRYPTO_DEVLOCK
 -DSQLITE_ENABLE_RTREE 
 -DSQLITE_ENABLE_COLUMN_METADATA")

elseif(APPLE)

message("add defines on apple, CRYPTO_CC")

add_definitions("-DSQLITE_ENABLE_FTS3
-DSQLITE_ENABLE_FTS3_PARENTHESIS
-DSQLITE_ENABLE_API_ARMOR $(inherited)
-DSQLITE_ENABLE_RTREE
 -DSQLITE_ENABLE_LOCKING_STYLE=1
 -DSQLITE_OMIT_LOAD_EXTENSION
 -DSQLITE_OMIT_BUILTIN_TEST
 -DSQLITE_OMIT_SHARED_CACHE
 -DSQLITE_OMIT_AUTORESET
 -DSQLITE_ENABLE_UPDATE_DELETE_LIMIT
 -DSQLITE_SYSTEM_MALLOC
 -DSQLITE_THREADSAFE=2
 -DSQLITE_DEFAULT_PAGE_SIZE=4096
 -DSQLITE_DEFAULT_CACHE_SIZE=-2000
 -DSQLITE_CORE
 -DSQLITE_HAS_CODEC
 -DSQLITE_TEMP_STORE=2
 -DSQLCIPHER_CRYPTO_CC
 -DUSE_PREAD=1
 -DSQLCIPHER_PREPROCESSED
 -DHAVE_USLEEP
 -DSQLITE_MALLOC_SOFT_LIMIT=0
 -DSQLITE_WCDB_SIGNAL_RETRY=1
 -DSQLITE_DEFAULT_MEMSTATUS=0
 -DSQLITE_DEFAULT_WAL_SYNCHRONOUS=1
 -DSQLITE_LIKE_DOESNT_MATCH_BLOBS
 -DSQLITE_MAX_EXPR_DEPTH=0
 -DSQLITE_OMIT_DEPRECATED
 -DSQLITE_OMIT_PROGRESS_CALLBACK
 -DSQLITE_OMIT_SHARED_CACHE
 -DSQLITE_ENABLE_COLUMN_METADATA
 -DOMIT_CONSTTIME_MEM
 -DOMIT_MEMLOCK
 -DSQLITE_ENABLE_FTS3_TOKENIZER
 -DSQLITE_ENABLE_DBSTAT_VTAB
 -DSQLITE_WCDB_CHECKPOINT_HANDLER
 -DSQLITE_MMAP_READWRITE
 -DSQLITE_ENABLE_FTS5")

endif()

include_directories(../../third_include)
link_directories(../../third_libs)

set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2 -Wall -DNDEBUG -Wunused-variable")
# set(LIB_INSTALL_DIR ".")

if (ANDROID)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -funwind-tables -fstack-protector -fomit-frame-pointer -DANDROID")
endif ()

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_POSITION_INDEPENDENT_CODE ON)


set(SRC_BASE_PATH ${CMAKE_SOURCE_DIR})

if (LINUX)
    set(SQL_INCLUDE_PATH ${CMAKE_SOURCE_DIR}/sqlcipher/src/ubuntu)
elseif (ANDROID)
    set(SQL_INCLUDE_PATH ${CMAKE_SOURCE_DIR}/sqlcipher/src/android)
elseif (APPLE)
    set(SQL_INCLUDE_PATH ${CMAKE_SOURCE_DIR}/sqlcipher/src/macos)
endif ()

include_directories(
        ${SRC_BASE_PATH}/abstract/include
        ${SRC_BASE_PATH}/core/include
        ${SRC_BASE_PATH}/util/include
        ${SRC_BASE_PATH}/sqlcipher/include
        ${SRC_BASE_PATH}/repair/include/WCDB
        ${SQL_INCLUDE_PATH}
)

# build wcdb
aux_source_directory(${SRC_BASE_PATH}/abstract/src SRC_ABST)
aux_source_directory(${SRC_BASE_PATH}/core/src SRC_CORE)
aux_source_directory(${SRC_BASE_PATH}/util/src SRC_UTIL)
aux_source_directory(${SRC_BASE_PATH}/repair/src SRC_REPR)
add_library(
        wcdb
        STATIC
        ${SRC_ABST}
        ${SRC_CORE}
        ${SRC_UTIL}
        ${SRC_REPR}
)

# install(TARGETS wcdb LIBRARY DESTINATION ${LIB_INSTALL_DIR} ARCHIVE DESTINATION ${LIB_INSTALL_DIR})


target_link_libraries(
        wcdb
        wcdb_sqlcipher
        -lz
)

if (LINUX)
    target_link_libraries(
            wcdb
            pthread
    )

endif ()

set(LIB_NAME wcdb)

set(INSTALL_BIN_DIR "${CMAKE_INSTALL_PREFIX}/bin" CACHE PATH "Installation directory for executables")
set(INSTALL_LIB_DIR "${CMAKE_INSTALL_PREFIX}/lib" CACHE PATH "Installation directory for libraries")
set(INSTALL_INC_DIR "${CMAKE_INSTALL_PREFIX}/include" CACHE PATH "Installation directory for headers")


if(NOT SKIP_INSTALL_LIBRARIES AND NOT SKIP_INSTALL_ALL )
    install(TARGETS ${LIB_NAME}
        RUNTIME DESTINATION "${INSTALL_BIN_DIR}"
        ARCHIVE DESTINATION "${INSTALL_LIB_DIR}"
        LIBRARY DESTINATION "${INSTALL_LIB_DIR}" )
endif()
if(NOT SKIP_INSTALL_HEADERS AND NOT SKIP_INSTALL_ALL )
    install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/abstract/include DESTINATION "${INSTALL_INC_DIR}")
    install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/core/include DESTINATION "${INSTALL_INC_DIR}")
    install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/util/include DESTINATION "${INSTALL_INC_DIR}")
    install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/repair/include DESTINATION "${INSTALL_INC_DIR}")
endif()
